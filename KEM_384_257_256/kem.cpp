#include "kem.h"
#include "utils.h"
#include "NTT.h"
#include <stdlib.h>
#include <avr/pgmspace.h>
#include <Arduino.h>


const PROGMEM Poly A[K*K] = {{8, 20, -121, 57, -26, -4, 63, 91, 110, 127, -36, -96, 80, -1, 87, -39, 83, -80, -115, 95, 39, 38, 50, -121, -7, 115, 88, 71, 14, -62, -41, -107, -42, 94, -51, 60, 89, -117, -106, -58, 9, -14, -26, -39, -16, 60, -79, -61, -20, 62, -95, -110, -29, -46, 25, 93, -60, -16, 35, 83, -79, -7, -25, 7, 87, 53, 67, 47, -65, -40, 117, 73, -55, 91, 33, 58, -107, -47, 125, -128, -113, 29, 18, 114, 112, -86, -51, -77, -103, -16, 5, -53, 105, 109, -47, -66, -96, 19, -19, 95, 107, 97, -90, -76, -70, 71, -19, -48, 24, -23, 80, 39, 5, -30, 24, -12, 12, 102, -89, 38, 85, -85, -16, -68, 23, -64, -5, 55},{84, 104, -107, -67, 72, -69, -15, 2, -126, -35, 82, -103, -59, 33, 64, 75, 2, 87, -66, -114, -69, 101, -77, -113, -112, -94, -52, 39, -30, 71, 94, -75, -83, 115, 115, -12, -83, -29, 118, 47, 65, -58, 72, -123, -25, -122, -49, 105, 94, -115, -10, 24, 114, -88, 40, 1, -54, -13, 40, 45, 57, 5, -31, 102, 119, -45, 89, 35, -74, -50, -46, -10, -109, 25, 123, 122, -97, -54, 99, -4, -41, 88, -109, 72, -128, -70, -55, 74, 45, 113, -10, -27, 117, -41, 74, 107, 42, -94, 13, -33, -16, -34, 85, -126, -9, -49, 125, 22, 25, -34, 17, -17, -75, 36, -74, 53, 95, 127, -1, -118, 111, -12, -16, -30, 75, 57, -52, -11},{91, -39, -45, 74, -74, -88, 77, 45, -9, -56, 66, 15, 38, -46, 126, 91, -10, 51, -113, 84, 50, 14, 94, -97, -127, 77, -127, 77, 6, 77, 65, 96, -91, -109, -87, 92, 59, -11, -121, 49, 61, 74, -65, -30, 27, 60, 60, 16, 111, 75, -29, -97, 88, 65, 62, 90, 13, 63, -91, 18, 12, 102, -14, -80, -8, 27, -117, 51, -113, -109, -29, -53, -36, -94, 45, -10, -35, 104, -122, -53, 51, 105, -22, -119, 41, 40, 99, -74, -26, 7, 72, 114, 108, 57, -94, -28, 83, 45, -106, -31, -65, 121, 44, 27, -102, 88, 17, 120, 64, 23, -62, 114, 127, -84, 123, 40, 84, -35, -35, -71, 100, 36, 43, 80, -35, -52, 51, -81},{-8, -56, 17, 56, -64, 60, -46, 91, 20, 99, 82, -45, 121, 19, 68, 120, 63, 62, -98, -111, 26, -5, 75, -2, -98, -11, 77, 123, -64, -1, 42, 56, 71, 58, -17, 6, -11, -63, -32, -120, 35, -79, 91, 28, 69, 30, -110, -126, 92, 48, -108, -11, -86, 95, -14, 72, 83, -66, 67, -110, -68, 108, -55, -126, 37, 57, 9, -103, -7, -24, 34, -101, 26, -4, -74, 94, 26, -56, 96, 117, 120, -13, 105, 33, -47, -37, -23, 35, -104, 43, 53, -43, 22, 127, 87, -70, -74, -33, 83, 47, 72, -12, 74, 97, -16, -128, 62, 9, 72, -100, -3, -65, 16, -27, -33, -32, -65, -57, -125, -40, 114, -73, -84, -122, 53, -126, 64, -22},{98, -110, -104, -88, 6, -30, 8, -11, 98, 69, 126, -88, 97, 122, 103, 112, 95, -58, 80, -99, 13, 83, 117, 127, 9, -96, 4, 62, 35, -60, -89, -125, -42, -64, -85, -37, -95, 51, 81, -126, -9, -51, 42, 87, 71, 17, 71, 37, 87, 22, -63, 99, 104, -74, 97, 112, 86, -27, 45, 120, -88, 85, 123, 126, 20, 37, -40, 53, 87, 40, -74, 77, -11, -33, 36, -69, 112, 106, -33, -59, 127, 32, 40, -27, -43, 8, -44, -85, -20, -127, 34, -109, -43, 29, -112, 105, 65, 105, -100, 24, 16, 82, -28, 4, -80, 7, 63, 32, -16, -99, -28, 110, -67, -117, -46, 18, -109, -90, 61, 127, 39, 95, -110, 124, -5, 34, -29, 59},{10, 127, -46, 26, -49, 55, -99, 127, 61, -36, 30, -83, 121, -126, 26, -75, 13, 109, 72, 32, -110, -125, 31, -72, 98, 49, -77, 92, -46, -107, 23, -36, -109, -24, 118, 98, 30, 18, 96, -37, 110, 126, 8, 103, -1, -95, 27, -117, 13, 98, 44, -98, 102, -54, -42, -58, -6, -120, 34, -53, -99, 56, 39, 48, -97, -101, 17, 62, 46, -15, -104, -102, -18, -97, 0, 109, 64, -101, -9, -51, 125, -94, 107, -31, 108, -63, -89, 101, 73, 73, -80, 103, 0, -42, 22, 31, 114, 39, 92, -98, 23, 116, -72, -124, -110, 57, -16, -46, -45, 103, 31, 79, 9, -120, -80, -12, 73, -41, -39, 18, 31, -120, -8, 30, 94, 13, -68, 79},{51, -104, 109, -55, 11, 37, -51, -99, -35, -68, -17, 48, -93, 13, -2, 44, 21, -83, 31, -34, -125, -9, 112, -95, 127, 103, 63, 93, 115, 124, -86, 38, 19, 23, 111, -99, -69, 60, 58, -105, 120, -88, -58, 26, 53, -61, 69, -54, 113, -28, -89, 116, 91, -106, -107, 90, -4, -45, -75, -18, -50, 95, -109, -32, -11, -126, 126, -81, 62, 55, -58, -76, 96, -117, 79, -109, -49, 19, -35, -65, 119, 4, 50, -47, -103, -58, 42, 21, 26, -34, -125, -25, -68, 22, -57, 50, 24, -60, -32, 85, -6, -90, -119, 89, -79, -41, 109, 128, 106, -55, 62, -32, -51, -16, -80, 102, -75, 90, -5, -50, -73, 126, 54, -13, 19, -4, 36, 43},{64, -124, 127, 57, -86, 7, 18, 91, 94, -2, 91, -57, -58, 24, 39, -110, 7, 87, 121, -68, -81, 115, 10, 102, 112, 63, -40, -127, -70, -4, -85, -7, 128, -86, -78, 41, 49, 68, 3, -114, -63, 93, -43, -122, 117, 124, -103, -5, -47, -111, -74, 128, -125, 65, 101, -14, 127, -68, 115, -71, -73, -98, 50, -74, 72, -29, 95, 120, -90, 98, -123, 103, 62, -38, 110, 50, 85, 6, 45, 37, 23, 99, 36, -103, -94, 8, -118, -95, -60, -4, 90, -5, 26, 11, -79, 97, -18, 15, 89, 20, -16, 94, 123, 46, 56, -25, -33, 12, 109, -117, 49, 3, -18, -44, -101, 16, 93, -91, 49, 32, -96, -119, -102, 59, -108, 75, -102, 2},{-38, 115, 21, -55, -48, 15, 119, -121, 118, 86, -110, 98, -32, 67, 100, 78, 23, 127, -34, 115, 35, 14, 18, 68, 24, -85, 126, 44, 119, 23, 45, 80, 10, -63, -104, -39, 81, 15, -32, -59, -28, 114, -89, 68, -76, 10, -111, 75, -120, -17, -68, -86, -4, 78, -19, 19, 121, 106, 62, 111, 1, -22, -67, -118, -85, -42, -29, 124, -28, -62, 64, 72, 51, -26, -118, 103, 113, -101, -80, 121, -119, -20, 34, -123, 57, -113, 24, 50, 121, 86, -97, -7, 63, -35, -126, 106, -78, -27, -28, 22, -90, -92, 93, 90, 10, -26, -65, 122, 2, 112, -15, -118, 91, -109, -113, 20, -94, -89, 69, 26, 125, 100, -109, -70, 64, -107, -92, 114}};
const PROGMEM Poly S[2*K] = {{-11, -88, -120, 40, -128, -55, 77, 57, 51, -114, 54, -100, 116, 66, 72, 116, -124, -43, -52, -76, 73, -75, -7, 19, -15, -81, 31, -23, -64, -35, 65, 11, -43, 3, 21, 46, 29, 50, 8, 99, 81, -33, 24, 77, -81, 4, 50, 111, -61, -95, -74, -112, -94, 82, -85, 3, 103, -35, -28, -117, -77, 95, 104, 111, -39, 95, -42, 8, -19, 30, 34, 50, 65, -61, 37, -96, 72, 48, -103, 109, -115, 1, 36, 60, 71, 109, -3, -72, 23, 25, -39, -81, -96, -65, 19, 109, -83, -62, -58, -37, 100, 10, -38, 5, 44, -49, 21, -79, 45, 40, -100, 99, 10, -84, 64, -120, -59, 58, -41, -63, -43, -21, 100, -122, -38, 127, 76, -61},{-56, -65, -39, -30, 109, 8, 84, -12, 92, -68, 37, 85, 92, 44, -21, 63, 66, -19, -32, 5, 107, 116, 95, 36, 57, -51, 17, -71, -45, -106, 79, 57, -97, -52, 70, 24, -110, 95, 36, 77, 26, -87, 73, -56, 86, 39, -40, -47, 58, 0, 38, 60, 16, -51, -65, 99, 106, -25, 31, -78, -43, 13, -85, 26, -105, -4, -33, -42, -117, 89, 26, 2, 86, 104, 114, -50, -32, -65, -71, -89, 27, -5, 70, 52, 49, -43, 29, -128, -30, -81, -24, -120, 31, 14, -94, 46, -113, 111, 12, 23, 58, -75, -49, -55, -45, -128, -84, -78, 22, -117, -39, 79, 15, 119, -81, -100, -127, 110, 104, 2, 30, 119, -30, -89, 81, 2, 78, 125},{128, -106, 90, -64, -26, 127, 101, 111, -90, -33, 67, -31, -91, -62, 113, -36, 88, 44, -22, -122, -17, 20, -113, 44, 41, -125, -93, -61, -58, 24, 50, -16, -57, -8, 15, -3, 15, -48, 11, -11, -100, 88, 33, -5, -22, -31, 10, -83, -113, -104, -123, -22, -45, 38, 101, 105, -28, -63, -128, -35, 89, 77, -111, -91, -51, -47, 39, 3, 59, -18, 121, 122, 94, 18, 108, -46, -104, -114, -48, 60, 79, -113, 102, -62, -45, -101, -30, 35, 127, -114, -97, 3, 47, 74, -103, -120, 11, -117, 43, 31, 19, -71, -17, -8, -11, -102, -85, 20, 3, 94, -108, 100, 73, 99, 105, 110, 115, -127, -84, -36, -17, -57, -99, 34, 46, 85, 116, -47},{96, -34, -34, -102, -71, -45, 106, 77, 116, -87, 52, 113, -47, -124, 87, 109, 71, -26, 121, -83, 10, -65, 106, 15, -77, -115, 118, -63, -102, 114, 25, -26, -13, -75, -42, -88, 109, 0, -121, -80, -55, 21, 63, 52, 50, 95, -56, 91, -41, -111, 60, -104, -3, -127, -86, -26, -3, -89, -117, 55, 32, 121, 47, -111, -49, 42, 113, -51, 123, 78, -99, -72, -14, -97, -57, -75, 93, 74, -6, 53, 1, 25, 29, -57, 88, 93, 96, -11, 27, 58, -20, -104, 90, -122, -112, -42, 101, -69, -124, 61, -9, -103, 52, 36, -83, -16, -110, 78, -66, -2, 38, -115, 91, 98, -45, 23, 91, 35, 128, -49, 31, 45, 61, 4, -13, 54, -79, -50},{-91, 64, -124, 44, -74, 51, 25, -78, 124, 89, 117, -77, -121, 60, -9, -114, 23, -89, -88, -2, 19, 34, 117, -125, -97, 57, 76, -66, 69, -32, -46, 37, -5, 17, 92, -23, 107, -48, -52, -119, 76, 78, -99, -111, 104, -39, 7, 38, 57, -3, 21, 24, 68, 97, -100, -61, -89, 4, 7, -61, 89, -49, -58, 61, -128, -89, -16, -39, 41, -19, 111, 11, 105, 90, 26, -13, -15, -109, -11, 40, -17, 57, 36, 54, 66, 63, -110, 115, 25, 7, -33, 75, -28, -65, -104, -92, 90, -71, 110, -121, 76, -95, 44, 11, -10, -67, -102, -42, 77, -65, -87, 10, -43, -14, -36, -80, -108, 107, 128, 57, 127, -32, 91, 100, -17, -83, 50, 29},{-41, 79, -93, 77, -67, 83, 96, 82, 100, 16, -53, -117, 125, -87, 116, -62, -46, -127, -33, -97, 101, 14, 16, -18, 75, -96, -54, -113, -45, -92, 103, -101, -96, 39, 4, -12, 36, 120, -10, 86, 94, -79, 99, 12, -117, -31, 13, 66, 128, -88, 0, -88, -20, -117, 94, 41, 68, 92, 27, -26, 115, 114, 26, -78, 77, -83, -41, 21, 98, -97, -73, 45, 57, 100, -68, -94, 128, 12, -57, -16, 63, -94, 93, 117, -16, 119, 0, -115, -82, -121, -74, 92, -9, 31, 6, -17, -37, 3, 51, -105, -56, 48, 81, 38, 17, 34, 90, -116, 12, 34, 28, 7, -113, -5, 27, 9, -80, -89, -52, 107, 32, 89, -48, 36, -101, 65, -18, 14}};
const PROGMEM Poly T[2*K] = {{-125, 87, 46, 128, 100, -115, 50, 26, -19, 10, 63, -42, 4, 96, 31, -126, 125, 69, 49, 12, -66, -12, -118, -1, 123, 40, 16, 33, -126, 5, 95, 27, 120, -75, -64, -111, -28, -86, -121, -47, -103, -89, 66, 0, 50, -38, 78, -118, 92, -88, -11, -65, 122, 108, -103, -122, -39, 17, -116, -107, 3, 100, 25, 68, 79, -62, 62, -118, 22, 55, 111, 80, 36, 6, -74, 76, -86, -77, 6, -16, -73, -114, 78, -124, -5, 105, -99, -5, 34, -34, 28, -75, 26, 41, -29, -7, -85, -2, 39, 120, 82, 126, -75, -59, 94, -125, 51, 56, -25, -49, -127, 97, -48, -120, -7, -46, -96, 1, -113, 18, 2, -49, -65, 68, 9, 17, -113, -90},{-26, -109, 25, -80, 114, -30, -15, 107, 22, -95, 88, -55, -8, 117, 110, 24, 66, -58, -57, -64, 53, -38, -93, -107, 116, 113, -122, 122, -76, 127, -42, 29, -97, -108, -61, -10, 52, 19, 67, -124, 114, -70, -84, -53, -104, 114, -23, -68, 101, -128, 59, 69, -121, -96, -52, -77, -84, 10, 57, 117, 59, 128, -117, -3, 99, -29, 114, 106, 54, 110, 11, 17, 53, -128, -62, -74, 16, 99, 123, 120, 53, 98, 49, 77, -49, -53, -73, -38, 56, 40, 84, -48, -54, 18, 35, 34, 65, -116, -82, 101, 106, -128, 61, 90, 109, -51, 15, -23, -109, 46, -101, -91, -81, 100, 85, 127, -87, 88, -42, -15, -3, -56, -62, 31, 24, -36, 19, 16},{115, -67, -81, 81, 12, -123, -84, -55, -36, -93, 99, -28, -6, 70, -49, -105, 51, -65, 42, -110, 86, -123, -53, -19, -31, 71, -72, -64, -64, -10, 101, -60, 1, -97, -113, -17, 50, -126, -31, 57, 27, 104, -33, 43, 52, 82, -106, -94, 98, 91, 97, -94, -5, -53, 23, -103, 5, -119, 48, 93, 79, 16, -46, 85, -84, 39, -58, 20, 124, -90, -5, -71, 87, -83, 55, 40, 24, 47, 70, 56, -125, 119, -94, 56, 9, 52, 81, 30, 95, -48, 54, -25, 37, -51, 44, -111, 110, -126, -106, -118, -94, -15, 113, 84, -13, -103, 79, 119, -30, 22, 100, -26, -64, -107, -127, -44, 21, -34, -25, 88, -45, 56, 66, -53, -45, -4, -113, 56},{-119, -51, -118, -93, 4, -29, -110, -80, -92, 116, 36, 47, 121, 103, 82, -20, -41, -58, 109, -96, 90, -59, 43, -15, 26, 5, -118, -118, 48, -121, 54, -110, -49, 123, 126, 117, 3, 126, -33, 71, 102, 65, -48, -54, -72, -118, 89, -69, -105, -33, -75, 74, -83, -13, -52, -27, -30, -97, -50, 14, 95, 57, -95, 77, -73, -79, 1, 92, 66, 80, 11, -101, 41, 110, 50, -80, -94, 11, -64, -33, 23, -50, -112, -50, -26, -111, 16, -68, 69, 98, -61, 77, 30, 26, 110, -20, 88, 86, -123, -82, -105, 55, -88, -81, 103, -27, 55, 26, 18, 14, 30, 119, -51, -103, 108, -86, -77, -58, -42, -27, 11, 73, -13, 55, -71, 60, 82, -73},{0, 9, 72, 40, -110, 82, 8, -81, -52, -32, 107, -107, -84, 39, 15, -13, -57, 124, -115, -41, -102, -4, -86, -110, 51, 2, -81, -23, -11, -13, 118, 66, -75, -27, -96, 92, 117, 24, -51, 90, -20, 63, 108, 21, -92, 79, 86, -124, -1, 22, -53, -65, 51, -13, -41, -14, 74, 23, 92, 50, 23, 0, 30, 20, 67, 22, -55, -103, 68, -78, -71, -126, -11, 94, 90, 49, -120, 116, -87, -25, 28, 49, -35, 6, -108, 110, 34, 29, 123, 115, 30, -67, -61, 82, -12, 116, -98, -116, 4, -114, -123, 60, 93, 4, 61, 10, -103, 79, -115, 120, -83, -86, -92, -35, 35, -92, 21, 113, 64, -106, 118, 30, 94, -67, 91, 38, 16, 121},{-2, -66, -46, 39, 31, 40, -82, -121, 109, -120, -86, -2, -17, 80, -77, 105, 43, -113, -127, -112, 127, -67, -30, 85, 10, -112, -112, 118, -100, 83, -108, 75, -73, 100, -60, 90, -21, 4, -36, 13, 111, 85, -67, -95, -18, 34, 68, -50, 23, -91, -60, -29, -12, -101, -46, -60, -91, 52, -76, 75, 41, 123, -42, -19, -123, 79, 11, -98, 37, -68, 120, 21, -63, 81, 75, -31, 61, -9, -68, -7, -66, -83, 114, -73, 64, -41, -35, -122, 29, -77, 92, 122, 117, 85, -21, 86, 25, -101, 43, -94, -11, 16, 73, -74, 47, 39, -92, -21, -49, 114, 8, 4, -21, 95, 52, -34, 82, -105, 24, 22, 114, -127, -18, -109, -27, 63, 126, 128}};

const PROGMEM unsigned char z[LAMBDA]={0xDE, 0xAD, 0xBE, 0xEF};


void add_key(Poly* p, unsigned char* k){
    /*
     * Adds encoding of k to the polynomial p
     */
    int i;
    
    for(i=0; i < LAMBDA*4; ++i) p->c[i] = mod_q(p->c[i] + ((k[i/8]>>(i%8))&1)*(Q/2));
}

void decode_key(const Poly* p, unsigned char* k){
    /*
     * Threshold decodes p and put the result in k
     */
    int i, v; 
    
    for(i=0; i < LAMBDA/2;   ++i) k[i] = 0;
    for(i=0; i < LAMBDA*4; ++i){
        v = p->c[i];
        k[i/8] += (((v > Q/4) || (v < -Q/4)) << (i%8));
    }
}

void fill_error_poly(Poly* p, unsigned char* r){
    /*
     * Sets p to an error polynomial.
     * Uses ERROR_POLY_ENTROPY bytes of r
     */
    int i;
    
    for(i=0; i < N/4;++i){
        p->c[i*4+0] = ((r[i] >> 0)&1) - ((r[i] >> 1)&1);
        p->c[i*4+1] = ((r[i] >> 2)&1) - ((r[i] >> 3)&1);
        p->c[i*4+2] = ((r[i] >> 4)&1) - ((r[i] >> 5)&1);
        p->c[i*4+3] = ((r[i] >> 6)&1) - ((r[i] >> 7)&1);   
    }
    
}

void sub_poly_packed(const Packed_poly* a, const Poly* b, Poly* res){
    /*
     * Computes a - b and puts the result in res
     * A is in packed form
     */
    int i;
    
    for(i=0; i < N; ++i) res->c[i] = mod_q( unpack_coef(a,i) - b->c[i]); 

}

void pgm_dot_product_packed(const Poly* A, const Packed_poly* B, Poly* temp, int k){
    /*
     * Computes dot product between to vectors of length k and puts the result in temp
     * All polynomials should be in frequency domain
     * A is stored unpacked in flash memory
     * B is in packed form
     */
    int i,j;
    
    for(j=0; j < N; ++j) temp->c[j] = mm257(pgm_read_word_near(A[0].c + j),unpack_coef(B,j));
    for(i=1; i < k; ++i) for(j=0; j < N; ++j) temp->c[j] = mod_q(temp->c[j] + pgm_read_word_near(A[i].c + j) * unpack_coef(&B[i],j)); 

}


void pgm_pointwise_add_mul_packed(const Poly* a, const Poly* b, Packed_poly* res){
    /*
     * Computes res = res + a * b with res in packed form
     * All polynomials should be in frequency domain 
     */
    int i, v;
    
    for(i=0; i < N; ++i) {
      v = unpack_coef(res,i);
      v = mod_q(v + pgm_read_word_near(a->c + i) * b->c[i]); 
      pack_coef(res, i, v);
    }
}



void CCA_encaps(CCA_ciphertext* ct, unsigned char* k){
    int i;
    unsigned char pk_m[2*LAMBDA];
    unsigned char k_hat_r[2*LAMBDA];
    
    for(i= 0; i < LAMBDA; ++i) pk_m[i] = pgm_read_word(T[0].c + i)&0xFF;
    for(i=LAMBDA; i < 2*LAMBDA; ++i) pk_m[i] = random()&0xFF;   

    H(k_hat_r, 2*LAMBDA, pk_m, 2*LAMBDA); //K,r = G(pk,m)
    encaps(ct->U, ct->V, pk_m+LAMBDA, k_hat_r+LAMBDA);
    
    for(i=0; i < LAMBDA; ++i) ct->nonce[i] = k_hat_r[i];
    
    H(k, LAMBDA, ct->nonce, LAMBDA+(K+2)*PACK_SIZE);
}

void CCA_decaps(CCA_ciphertext* ct, unsigned char* k){
    unsigned char pk_m[2*LAMBDA];
    unsigned char k_hat_r[2*LAMBDA];
    unsigned char h1[LAMBDA];
    unsigned char h2[LAMBDA];
    int i, correct=1;
    
    for(i=0; i < LAMBDA; ++i) pk_m[i] = pgm_read_word(T[0].c + i)&0xFF;
    
    decaps(ct->U, ct->V, pk_m+LAMBDA);
    H(k_hat_r, 2*LAMBDA, pk_m, 2*LAMBDA); //K,r = G(pk,m)
    H(h1, LAMBDA, (ct->U)->bytes, (K+2)*PACK_SIZE);  

    encaps(ct->U, ct->V, pk_m+LAMBDA, k_hat_r+LAMBDA);
    H(h2, LAMBDA, (ct->U)->bytes, (K+2)*PACK_SIZE); 

    for(i=0; i < LAMBDA; ++i) correct = correct & (h1[i] == h2[i]);
     
    correct = -correct; // 0x000000 or 0xFFFFFFFF
    
    for(i=0; i < LAMBDA; ++i) ct->nonce[i] = (k_hat_r[i]&correct) | (pgm_read_word(z+i)&(~correct));
    
    H(k, LAMBDA, ct->nonce, LAMBDA+(K+2)*PACK_SIZE);
    
}

void encaps(Packed_poly* U, Packed_poly* V, unsigned char* k, unsigned char* randomness){ 
    int i, j, random_size = (2+2*K)*ERROR_POLY_ENTROPY;  
    unsigned char random_tape[random_size]; 
    Poly x; 
    
    XOF(random_tape, random_size, randomness, LAMBDA); // extend seed into large entropy pool

    fill_error_poly(&x, random_tape); 
    add_key(&x,k);
    NTT(&x);
    pack(&x,V);    

    fill_error_poly(&x, random_tape+ERROR_POLY_ENTROPY); 
    add_key(&x,k+LAMBDA/2);
    NTT(&x);
    pack(&x,V+1);    

    for(i=0; i < K; ++i){ // sample packed vector in K-rank module, coef. of ring elements from binomial 1 dist.
        fill_error_poly(&x, random_tape+ERROR_POLY_ENTROPY*(i+2));
        NTT(&x); // frequency domain
        pack(&x, &U[i]);
    }
    
    for(i=0; i < K; ++i){ // Matrix-vector multiplication with iterative sampling
        fill_error_poly(&x,random_tape+ERROR_POLY_ENTROPY*(K+2+i));
        NTT(&x);
        
        for(j=0; j < K; ++j) pgm_pointwise_add_mul_packed(&A[i*K + j], &x, &U[j]);   
                 
        pgm_pointwise_add_mul_packed(&T[i],&x,V);
        pgm_pointwise_add_mul_packed(&T[K+i],&x,V+1);
    }
}


void decaps(Packed_poly* U, Packed_poly* V, unsigned char* k){
    Poly temp;
    
    pgm_dot_product_packed(S, U, &temp, K);
    sub_poly_packed(V, &temp, &temp);
    INTT(&temp);
    decode_key(&temp, k);

    pgm_dot_product_packed(S+K, U, &temp, K);
    sub_poly_packed(V+1, &temp, &temp);
    INTT(&temp);
    decode_key(&temp, k+LAMBDA/2);
}

